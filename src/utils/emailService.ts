import emailjs from '@emailjs/browser';
import { jsPDF } from 'jspdf';
import { saveContactSubmission, saveOnboardingSubmission } from './db';

// Initialize EmailJS with public key
const initEmailJS = () => {
  try {
    emailjs.init(import.meta.env.VITE_EMAILJS_PUBLIC_KEY);
  } catch (error) {
    console.error('Failed to initialize EmailJS:', error);
  }
};

initEmailJS();

interface ContactFormData {
  name: string;
  email: string;
  company?: string;
  phone?: string;
  subject: string;
  message: string;
  preferredContact: string;
}

interface OnboardingFormData {
  projectName: string;
  description: string;
  services: string[];
  budget: string;
  timeline: string;
}

const generatePDF = (data: any, formType: 'contact' | 'onboarding'): string => {
  const doc = new jsPDF();
  const lineHeight = 10;
  let yPosition = 20;

  // Add header
  doc.setFontSize(20);
  doc.setTextColor(255, 107, 53); // accent color
  doc.text('KodeLabz', 20, yPosition);
  
  // Add title
  doc.setTextColor(0, 0, 0);
  doc.text(formType === 'contact' ? 'Contact Form Submission' : 'Project Onboarding Form', 70, yPosition);
  
  // Reset font size for content
  doc.setFontSize(12);
  yPosition += lineHeight * 2;

  // Add timestamp
  doc.text(`Submission Date: ${new Date().toLocaleString()}`, 20, yPosition);
  yPosition += lineHeight * 2;

  // Add form data
  Object.entries(data).forEach(([key, value]) => {
    if (value) {
      const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
      const formattedValue = Array.isArray(value) ? value.join(', ') : value;
      
      // Handle long text wrapping
      const maxWidth = 170;
      const lines = doc.splitTextToSize(`${formattedKey}: ${formattedValue}`, maxWidth);
      
      lines.forEach(line => {
        if (yPosition > 280) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(line as string, 20, yPosition);
        yPosition += lineHeight;
      });
      
      yPosition += lineHeight / 2;
    }
  });

  // Add footer
  doc.setFontSize(10);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by KodeLabz - www.kodelabz.io', 20, 290);

  return doc.output('datauristring');
}

export const sendContactEmail = async (formData: ContactFormData): Promise<void> => {
  try {
    // Save to database first
    await saveContactSubmission({
      name: formData.name,
      email: formData.email,
      company: formData.company,
      phone: formData.phone,
      subject: formData.subject,
      message: formData.message,
      preferred_contact: formData.preferredContact
    });

    const pdfAttachment = generatePDF(formData, 'contact');

    const templateParams = {
      to_name: 'KodeLabz Team',
      from_name: formData.name,
      from_email: formData.email,
      message: formData.message,
      subject: formData.subject,
      company: formData.company || 'Not provided',
      phone: formData.phone || 'Not provided',
      preferred_contact: formData.preferredContact,
      pdf_attachment: pdfAttachment
    };

    const response = await emailjs.send(
      import.meta.env.VITE_EMAILJS_SERVICE_ID,
      import.meta.env.VITE_EMAILJS_CONTACT_TEMPLATE_ID,
      templateParams
    );

    if (response.status !== 200) {
      throw new Error('Failed to send email');
    }
  } catch (error) {
    console.error('Error sending contact email:', error);
    throw error;
  }
};

export const sendOnboardingEmail = async (formData: OnboardingFormData): Promise<void> => {
  try {
    // Save to database first
    await saveOnboardingSubmission({
      project_name: formData.projectName,
      description: formData.description,
      services: formData.services,
      budget: formData.budget,
      timeline: formData.timeline
    });

    const pdfAttachment = generatePDF(formData, 'onboarding');

    const templateParams = {
      to_name: 'KodeLabz Team',
      project_name: formData.projectName,
      description: formData.description,
      services: formData.services.join(', '),
      budget: formData.budget,
      timeline: formData.timeline,
      pdf_attachment: pdfAttachment
    };

    const response = await emailjs.send(
      import.meta.env.VITE_EMAILJS_SERVICE_ID,
      import.meta.env.VITE_EMAILJS_ONBOARDING_TEMPLATE_ID,
      templateParams
    );

    if (response.status !== 200) {
      throw new Error('Failed to send email');
    }
  } catch (error) {
    console.error('Error sending onboarding email:', error);
    throw error;
  }
};